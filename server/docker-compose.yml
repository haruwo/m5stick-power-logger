version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: m5stick-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: power_logger
      POSTGRES_USER: power_logger_user
      POSTGRES_PASSWORD: power_logger_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U power_logger_user -d power_logger"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - m5stick-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: m5stick-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: power_logger
      DB_USER: power_logger_user
      DB_PASSWORD: power_logger_password
      LOG_LEVEL: info
      FRONTEND_URL: http://localhost:3001
    volumes:
      - ./backend/logs:/app/logs
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - m5stick-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: m5stick-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      REACT_APP_API_URL: http://localhost:3000/api
    ports:
      - "3001:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - m5stick-network

  nginx:
    image: nginx:alpine
    container_name: m5stick-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - m5stick-network

networks:
  m5stick-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local