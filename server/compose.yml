version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: m5stick_postgres
    environment:
      POSTGRES_DB: power_logger
      POSTGRES_USER: power_user
      POSTGRES_PASSWORD: power_secure_2025
      TZ: Asia/Tokyo
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - power_logger_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U power_user -d power_logger"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: m5stick_redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - power_logger_net
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_secure_2025

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: m5stick_backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://power_user:power_secure_2025@postgres:5432/power_logger
      REDIS_URL: redis://:redis_secure_2025@redis:6379
      JWT_SECRET: your_jwt_secret_key_here_2025
      PORT: 3000
      TZ: Asia/Tokyo
    volumes:
      - ./backend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - power_logger_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Dashboard
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: m5stick_frontend
    environment:
      REACT_APP_API_BASE_URL: http://localhost:8080/api
      REACT_APP_ENVIRONMENT: production
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3001:3000"
    depends_on:
      - backend
    networks:
      - power_logger_net
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: m5stick_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "8080:80"
      - "8443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - power_logger_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  power_logger_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16