version: '3.8'

services:
  postgres-test:
    image: postgres:15-alpine
    container_name: m5stick-postgres-test
    environment:
      POSTGRES_DB: power_logger_test
      POSTGRES_USER: power_logger_user
      POSTGRES_PASSWORD: power_logger_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ../database/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U power_logger_user -d power_logger_test"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - e2e-network

  backend-test:
    build:
      context: ../backend
      dockerfile: Dockerfile.dev
    container_name: m5stick-backend-test
    environment:
      NODE_ENV: test
      PORT: 3000
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_NAME: power_logger_test
      DB_USER: power_logger_user
      DB_PASSWORD: power_logger_password
      LOG_LEVEL: error
      FRONTEND_URL: http://frontend-test:3000
    ports:
      - "3002:3000"
    depends_on:
      postgres-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - e2e-network

  frontend-test:
    build:
      context: ../frontend
      dockerfile: Dockerfile.dev
    container_name: m5stick-frontend-test
    environment:
      NODE_ENV: test
      REACT_APP_API_URL: http://localhost:3002/api
      CHOKIDAR_USEPOLLING: true
    ports:
      - "3003:3000"
    depends_on:
      backend-test:
        condition: service_healthy
    networks:
      - e2e-network

  e2e-tests:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: m5stick-e2e-tests
    environment:
      BASE_URL: http://frontend-test:3000
      API_URL: http://backend-test:3000/api
      CI: true
    volumes:
      - ./test-results:/app/test-results
      - ./playwright-report:/app/playwright-report
    depends_on:
      - frontend-test
      - backend-test
    networks:
      - e2e-network
    command: npm test

networks:
  e2e-network:
    driver: bridge